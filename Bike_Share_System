import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

cities = ('chicago', 'new york city', 'washington')
months = ('all', 'January', 'Feburary', 'March', 'April', 'May', 'May')
days   = ('Saturday', 'Sunday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')

def get_filters(city, month, day):
    """
    Asks user to specify a city, month, and day to analyze.
    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city = input("Write a city name: {}".format(cities).lower())
        if city not in CITY_DATA:
            print("\Wrong Entry, Try again\n")
            continue   
        else:
            break

    while True:
        search_option = input("Do you want to filter as month, day, all or none?").lower()               
        if search_option == 'month':
            month = input("Which month? {}".format(months).lower())
            day = 'all'
            break
                    
        elif search_option == 'day':
            month = 'all'
            day = input("Which day? {}".format(days).lower())
            break
                    
        elif search_option == 'all':
            month = input("Which month? {}".format(months).lower())           
            day = input("Which day? {}".format(days).lower())
            break       
        elif search_option == 'none':
            month = 'all'
            day = 'all'
            break       
        else:
            input("Wrong Entry! Please type it again. month, day, all or none?").lower()
            break

    print(city)
    print(month)
    print(day)
    print('-'*40)
    return city, month, day

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.
    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
#  change the start time into datetime    
    df['Start Time'] = pd.to_datetime(df['Start Time'])
# extract the day of the week and month so is the hour    
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()

    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) +1
        df = df[df['month'] == month]
    
    if day != 'all':
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

# display the most common month
    most_popular_month = df['month'].mode()[0]
    print(most_popular_month)


# display the most common day of week
    most_popular_day_of_week = df['day_of_week'].mode()[0]
    print(most_popular_day_of_week)


# display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    most_popular_hour = df['hour'].mode()[0]
    print(most_popular_hour)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
    
def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

# display most commonly used start station
    most_popular_station = df['Start Station'].mode()[0]
    print(most_popular_station)

# display most commonly used end station
    most_popular_End_station = df['End Station'].mode()[0]
    print(most_popular_End_station)

# display most frequent combination of start station and end station trip
    combination_of_stations = df.groupby(['Start Station', 'End Station'])
    print("\n", combination_of_stations.size().sort_values(ascending=False).head(1))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

# display total travel time
    print('\n', df['Trip Duration'].sum())


# display mean travel time
    print('\n', df['Trip Duration'].mean())


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

# Display counts of user types
    print('\n', df['User Type'].value_counts())

# Display counts of gender
    if 'Gender' not in df:
        print("value does not exist, try again")
    else:
            print('\n', df['Gender'].value_counts())
            print('\n', df['Gender'].value_counts().sum())


    



# Display earliest, most recent, and most common year of birth
    if 'Birth Year' not in df:
        print("Value does not exist in the city, Try again")
    else:
        print(df['Birth Year'].mode()[0])
        print('\n', df['Birth Year'].max())
        print('\n', df['Birth Year'].min())



    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
# If the user wants to see raw data
    spot_check = input('Do you want to see row data: yes or no').lower()
    if spot_check == 'yes':
        print(df.head(5))
    else:
        print("\n", 'Invaild answer')
            
        
            
     
    
    
def main():
    city = ""
    month = ""
    day = ""
    while True:
        city, month, day = get_filters(city, month, day)
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
